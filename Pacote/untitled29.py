# -*- coding: utf-8 -*-
"""Untitled29.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oJ2zktPd6KmstxvYGKYKx94LpERaCPrx
"""

import numpy as np
from numpy import sin, cos
from numpy import linalg as ln
import matplotlib.pyplot as plt

E = 205e9
A = 7.54e-5
G = 80e9
J = 1.0876e-8
Iy = 5.4381e9
Iz = 5.4381e9
L1 = 1.25
L2 = 1.7677
L3 = 2

#Elemento de barra

def Klocal(E, A, L):
  c1 = E*A/L
  return np.array([[c1,0,0,-c1,0,0],
                   [0,0,0,0,0,0],
                   [0,0,0,0,0,0],
                   [-c1,0,0,c1,0,0],
                   [0,0,0,0,0,0],
                   [0,0,0,0,0,0]])

def RotMat_xy(alfa): #xy
  seno = sin(alfa)
  cosseno = cos(alfa)
  return np.array([[cosseno, -seno, 0, 0, 0, 0],
                  [seno, cosseno, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0],
                  [0, 0, 0, cosseno, -seno, 0],
                  [0, 0, 0, seno, cosseno, 0],
                  [0, 0, 0, 0, 0, 0]])

def RotMat_xz(alfa): #xz
  seno = sin(alfa)
  cosseno = cos(alfa)
  return np.array([[cosseno, 0, -seno, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0],
                   [seno, 0, cosseno, 0, 0, 0],
                   [0, 0, 0, cosseno, 0, -seno],
                   [0, 0, 0, 0, 0, 0],
                   [0, 0, 0, seno, 0, cosseno]])

Ksis = np.zeros((48,48))

# Cálculo das barras horizontais paralelas ao eixo x:
K_horiz_local = Klocal(E, A, L1)
R_horiz = RotMat_xy(0)
K_horiz_global = R_horiz.dot(K_horiz_local.dot(np.transpose(R_horiz)))

# Cálculo das barras verticais:
K_vert_local = Klocal(E, A, L1)
R_vert = RotMat_xy((np.pi/2))
K_vert_global = R_vert.dot(K_vert_local.dot(np.transpose(R_vert)))

# Cálculo das barras inclinadas (45 graus / pi/4 radianos):
K_incli_positiva_local = Klocal(E, A, L2)
R_incli_p = RotMat_xy((np.pi/4))
K_incli_positiva_global = R_incli_p.dot(K_incli_positiva_local.dot(np.transpose(R_incli_p)))

# Cálculo das barras inclinadas (-45 graus / 7*pi/8 radianos):
K_incli_negativa_local = Klocal(E, A, L2)
R_incli_n = RotMat_xy((7*np.pi/8))
K_incli_negativo_global = R_incli_n.dot(K_incli_negativa_local.dot(np.transpose(R_incli_n)))

# Cálculo das barras paralelas ao eixo z:
K_eixo_z_local = Klocal(E, A, L3)
R_eixo_z = RotMat_xz(np.pi/2)
K_eixo_z_global = R_eixo_z.dot(K_eixo_z_local.dot(np.transpose(R_eixo_z)))

def alocacaosistema1(i, j):
  Ksis[3*i-3:3*i, 3*i-3:3*i] += K_horiz_global[0:3,0:3] # K22_barra1
  Ksis[3*i-3:3*i, 3*j-3:3*j] += K_horiz_global[0:3,3:6] # K23_barra1
  Ksis[3*j-3:3*j, 3*i-3:3*i] += K_horiz_global[3:6,0:3] # K32_barra1
  Ksis[3*j-3:3*j, 3*j-3:3*j] += K_horiz_global[3:6,3:6] # K33_barra1

alocacaosistema1(9, 10) #barra 2
alocacaosistema1(8, 9) #barra 3
alocacaosistema1(7, 8) #barra 4
alocacaosistema1(6, 7) #barra 5
alocacaosistema1(4, 5) #barra 7
alocacaosistema1(3, 4) #barra 8
alocacaosistema1(2, 3) #barra 9
alocacaosistema1(1, 2) #barra 10
alocacaosistema1(15, 16) #barra 12
alocacaosistema1(14, 15) #barra 13
alocacaosistema1(11, 12) #barra 16
alocacaosistema1(12, 13) #barra 17

def alocacaosistema2(i, j):
  Ksis[3*i-3:3*i, 3*i-3:3*i] += K_vert_global[0:3,0:3] # K22_barra1
  Ksis[3*i-3:3*i, 3*j-3:3*j] += K_vert_global[0:3,3:6] # K23_barra1
  Ksis[3*j-3:3*j, 3*i-3:3*i] += K_vert_global[3:6,0:3] # K32_barra1
  Ksis[3*j-3:3*j, 3*j-3:3*j] += K_vert_global[3:6,3:6] # K33_barra1

alocacaosistema2(9, 16) #barra 19
alocacaosistema2(8, 15) #barra 20
alocacaosistema2(7, 14) #barra 21
alocacaosistema2(2, 11) #barra 22
alocacaosistema2(3, 12) #barra 23
alocacaosistema2(4, 13) #barra 24

def alocacaosistema3(i, j):
  Ksis[3*i-3:3*i, 3*i-3:3*i] += K_incli_positiva_global[0:3,0:3] # K22_barra1
  Ksis[3*i-3:3*i, 3*j-3:3*j] += K_incli_positiva_global[0:3,3:6] # K23_barra1
  Ksis[3*j-3:3*j, 3*i-3:3*i] += K_incli_positiva_global[3:6,0:3] # K32_barra1
  Ksis[3*j-3:3*j, 3*j-3:3*j] += K_incli_positiva_global[3:6,3:6] # K33_barra1

alocacaosistema3(10, 16) #barra 11
alocacaosistema3(1, 11) #barra 15
alocacaosistema3(8, 14) #barra 26
alocacaosistema3(3, 13) #barra 28

def alocacaosistema4(i, j):
  Ksis[3*i-3:3*i, 3*i-3:3*i] += K_incli_negativo_global[0:3,0:3] # K22_barra1
  Ksis[3*i-3:3*i, 3*j-3:3*j] += K_incli_negativo_global[0:3,3:6] # K23_barra1
  Ksis[3*j-3:3*j, 3*i-3:3*i] += K_incli_negativo_global[3:6,0:3] # K32_barra1
  Ksis[3*j-3:3*j, 3*j-3:3*j] += K_incli_negativo_global[3:6,3:6] # K33_barra1

alocacaosistema4(6, 14) #barra 14
alocacaosistema4(5, 13) #barra 18
alocacaosistema4(8, 16) #barra 25
alocacaosistema4(3, 11) #barra 27

def alocacaosistema5(i, j):
  Ksis[3*i-3:3*i, 3*i-3:3*i] += K_eixo_z_global[0:3,0:3]; 
  Ksis[3*i-3:3*i, 3*j-3:3*j] += K_eixo_z_global[0:3,3:6]; 
  Ksis[3*j-3:3*j, 3*i-3:3*i] += K_eixo_z_global[3:6,0:3];
  Ksis[3*j-3:3*j, 3*j-3:3*j] += K_eixo_z_global[3:6,3:6];

alocacaosistema5(1, 10) #barra 1
alocacaosistema5(5, 6) #barra 6
alocacaosistema5(11, 16) #barra 29
alocacaosistema5(12, 15) #barra 30
alocacaosistema5(13, 14) #barra 31 

Fsis = np.zeros(48)

Fsis[22] = -12500
Fsis[33] = 10000
Fsis[34] = -12500
Fsis[38] = -10000
Fsis[42] = 10000
Fsis[47] = 10000

#print(Ksis)

#8 apoios apoiados
Ksis_red1 = np.delete(Ksis, [5,8,11,20,23,26], 0)
Ksis_red = np.delete(Ksis_red1, [5,8,11,20,23,26], 1)
Fsis_red = np.delete(Fsis,  [5,8,11,20,23,26])

#print(len(Ksis_red))
#print(len(Fsis_red))

deslocamento1 = ln.lstsq(Ksis_red, Fsis_red,0)
deslocamento = deslocamento1[3]

vetorx = []
vetory = []
vetorz = []


for i in range (0, len(deslocamento)):
  if i % 3 == 0:
    vetorx.append(deslocamento[i])
  if i % 3 == 1:
    vetory.append(deslocamento[i])
  if i % 3 == 2:
    vetorz.append(deslocamento[i])

ax = plt.figure().add_subplot(projection='3d')
for i in range(0, len(vetrorx)-1):
  vetorx1 = [vetorx[i], vetorx[i+1]]
  vetory1 = [vetory[i], vetory[i+1]]
  vetorz1 = [vetorz[i], vetorz[i+1]]
  ax.plot(vetorx1, vetory1,vetorz1,label = i+1)

#Elemento de viga-barra

def Klocalv(L, A, E, G, J, Iy, Iz):
  return np.array([[E*A/L,0,0,0,0,0,-E*A/L,0,0,0,0,0], #1
                  [0,12*E*Iz/L**3,0,0,0,6*E*Iz/L**2,0,-12*E*Iz/L**3,0,0,0,6*E*Iz/L**2], #2
                  [0,0,12*E*Iy/L**3,0,-6*E*Iy/L**2,0,0,0,-12*E*Iy/L**3,0,-6*E*Iy/L**2,0], #3
                  [0,0,0,G*J/L,0,0,0,0,0,-G*J/L,0,0], #4
                  [0,0,-6*E*Iy/L**2,0,4*E*Iy/L,0,0,0,6*E*Iy/L**2,0,2*E*Iy/L,0], #5
                  [0,6*E*Iz/L**2,0,0,0,4*E*Iz/L,0,-6*E*Iz/L**2,0,0,0,2*E*Iz/L], #6
                  [-E*A/L,0,0,0,0,0,E*A/L,0,0,0,0,0], #7
                  [0,-12*E*Iz/L**3,0,0,0,-6*E*Iz/L**2,0,12*E*Iz/L**3,0,0,0,-6*E*Iz/L**2], #8
                  [0,0,-12*E*Iy/L**3,0,6*E*Iy/L**2,0,0,0,12*E*Iy/L**3,0,6*E*Iy/L**2,0], #9
                  [0,0,0,-G*J/L,0,0,0,0,0,G*J/L,0,0], #10
                  [0,0,-6*E*Iy/L**2,0,2*E*Iy/L,0,0,0,6*E*Iy/L**2,0,4*E*Iy/L,0], #11
                  [0,6*E*Iz/L**2,0,0,0,2*E*Iz/L,0,-6*E*Iz/L**2,0,0,0,4*E*Iz/L]]) #12

def RotMatv_xy(alfa):
  seno = sin(alfa)
  cosseno = cos(alfa)
  return np.array([[cosseno,-seno,0,0,0,0,0,0,0,0,0,0],
                   [seno,cosseno,0,0,0,0,0,0,0,0,0,0],
                   [0,0,0,0,0,0,0,0,0,0,0,0],
                   [0,0,0,1,0,0,0,0,0,0,0,0],
                   [0,0,0,0,1,0,0,0,0,0,0,0],
                   [0,0,0,0,0,1,0,0,0,0,0,0],
                   [0,0,0,0,0,0,cosseno,-seno,0,0,0,0],
                   [0,0,0,0,0,0,seno,cosseno,0,0,0,0],
                   [0,0,0,0,0,0,0,0,0,0,0,0],
                   [0,0,0,0,0,0,0,0,0,1,0,0],
                   [0,0,0,0,0,0,0,0,0,0,1,0],
                   [0,0,0,0,0,0,0,0,0,0,0,1]])
  
def RotMatv_xz(alfa):
  seno = sin(alfa)
  cosseno = cos(alfa)
  return np.array([[cosseno,0,-seno,0,0,0,0,0,0,0,0,0],
                   [0,0,0,0,0,0,0,0,0,0,0,0],
                   [seno,0,cosseno,0,0,0,0,0,0,0,0,0],
                   [0,0,0,1,0,0,0,0,0,0,0,0],
                   [0,0,0,0,1,0,0,0,0,0,0,0],
                   [0,0,0,0,0,1,0,0,0,0,0,0],
                   [0,0,0,0,0,0,cosseno,0,-seno,0,0,0],
                   [0,0,0,0,0,0,0,0,0,0,0,0],
                   [0,0,0,0,0,0,seno,0,cosseno,0,0,0],
                   [0,0,0,0,0,0,0,0,0,1,0,0],
                   [0,0,0,0,0,0,0,0,0,0,1,0],
                   [0,0,0,0,0,0,0,0,0,0,0,1]])

# Cálculo das barras horizontais paralelas ao eixo x:
K_horiz_localv = Klocalv(L1, A, E, G, J, Iy, Iz)
R_horizv = RotMatv_xy(0)
K_horiz_globalv = R_horizv.dot(K_horiz_localv.dot(np.transpose(R_horizv)))

# Cálculo das barras verticais:
K_vert_localv = Klocalv(L1, A, E, G, J, Iy, Iz)
R_vertv = RotMatv_xy((np.pi/2))
K_vert_globalv = R_vertv.dot(K_vert_localv.dot(np.transpose(R_vertv)))

# Cálculo das barras inclinadas (45 graus / pi/4 radianos):
K_incli_positiva_localv = Klocalv(L2, A, E, G, J, Iy, Iz)
R_incli_pv = RotMatv_xy((np.pi/4))
K_incli_positiva_globalv = R_incli_pv.dot(K_incli_positiva_localv.dot(np.transpose(R_incli_pv)))

# Cálculo das barras inclinadas (-45 graus / 7*pi/8 radianos):
K_incli_negativa_localv = Klocalv(L2, A, E, G, J, Iy, Iz)
R_incli_nv = RotMatv_xy((7*np.pi/8))
K_incli_negativo_globalv = R_incli_nv.dot(K_incli_negativa_localv.dot(np.transpose(R_incli_nv)))

# Cálculo das barras paralelas ao eixo z:
K_eixo_z_localv = Klocalv(L3, A, E, G, J, Iy, Iz)
R_eixo_zv = RotMatv_xz(np.pi/2)
K_eixo_z_globalv = R_eixo_zv.dot(K_eixo_z_localv.dot(np.transpose(R_eixo_zv)))

Ksisv = np.zeros(96)

def alocacaosistema1v(i, j):
  Ksisv[6*i-6:6*i, 6*i-6:6*i] += K_horiz_globalv[0:6,0:6] # K22_barra1
  Ksisv[6*i-6:6*i, 6*j-6:6*j] += K_horiz_globalv[0:6,6:12] # K23_barra1
  Ksisv[6*j-6:6*j, 6*i-6:6*i] += K_horiz_globalv[6:12,0:6] # K32_barra1
  Ksisv[6*j-6:6*j, 6*j-6:6*j] += K_horiz_globalv[6:12,6:12] # K33_barra1

def alocacaosistema2v(i, j):
  Ksisv[6*i-6:6*i, 6*i-6:6*i] += K_vert_globalv[0:6,0:6] # K22_barra1
  Ksisv[6*i-6:6*i, 6*j-6:6*j] += K_vert_globalv[0:6,6:12] # K23_barra1
  Ksisv[6*j-6:6*j, 6*i-6:6*i] += K_vert_globalv[6:12,0:6] # K32_barra1
  Ksisv[6*j-6:6*j, 6*j-6:6*j] += K_vert_globalv[6:12,6:12] # K33_barra1

def alocacaosistema3v(i, j):
  Ksisv[6*i-6:6*i, 6*i-6:6*i] += K_incli_positiva_globalv[0:6,0:6] # K22_barra1
  Ksisv[6*i-6:6*i, 6*j-6:6*j] += K_incli_positiva_globalv[0:6,6:12] # K23_barra1
  Ksisv[6*j-6:6*j, 6*i-6:6*i] += K_incli_positiva_globalv[6:12,0:6] # K32_barra1
  Ksisv[6*j-6:6*j, 6*j-6:6*j] += K_incli_positiva_globalv[6:12,6:12] # K33_barra1

def alocacaosistema4v(i, j):
  Ksisv[6*i-6:6*i, 6*i-6:6*i] += K_incli_negativo_globalv[0:6,0:6] # K22_barra1
  Ksisv[6*i-6:6*i, 6*j-6:6*j] += K_incli_negativo_globalv[0:6,6:12] # K23_barra1
  Ksisv[6*j-6:6*j, 6*i-6:6*i] += K_incli_negativo_globalv[6:12,0:6] # K32_barra1
  Ksisv[6*j-6:6*j, 6*j-6:6*j] += K_incli_negativoglobalv[6:12,6:12] # K33_barra1

def alocacaosistema5v(i, j):
  Ksisv[6*i-6:6*i, 6*i-6:6*i] += K_eixo_z_globalv[0:6,0:6] # K22_barra1
  Ksisv[6*i-6:6*i, 6*j-6:6*j] += K_eixo_z_globalv[0:6,6:12] # K23_barra1
  Ksisv[6*j-6:6*j, 6*i-6:6*i] += K_eixo_z_globalv[6:12,0:6] # K32_barra1
  Ksisv[6*j-6:6*j, 6*j-6:6*j] += K_eixo_z_globalv[6:12,6:12] # K33_barra1

Fsisv=np.zeros(96)

Fsisv[69] = 31250
Fsisv[87] = 12500
Fsisv[16] = 18750
Fsisv[46] = 20000
Fsisv[95] = 12500
Fsisv[77] = 25000

deslocamento2 = ln.lstsq(Ksisv, Fsisv,0)
deslocamento = deslocamento2[3]

vetorxv = []
vetoryv = []
vetorzv = []


for i in range (0, len(deslocamentov)):
  if i % 3 == 0:
    vetorxv.append(deslocamentov[i])
  if i % 3 == 1:
    vetoryv.append(deslocamentov[i])
  if i % 3 == 2:
    vetorzv.append(deslocamentov[i])

ax = plt.figure().add_subplot(projection='3d')
for i in range(0, len(vetrorxv)-1):
  vetorx1 = [vetorx[i], vetorx[i+1]]
  vetory1 = [vetory[i], vetory[i+1]]
  vetorz1 = [vetorz[i], vetorz[i+1]]
  ax.plot(vetorx1, vetory1,vetorz1,label = i+1)